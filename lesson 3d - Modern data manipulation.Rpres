Lesson 3 - Modern data manipulation
========================================================
author: Dai ZJ
width: 1650
height: 1050
```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
```

Modern data manipulation
========================================================
- R is continually improving 
- R programmers write packages and publish them for other to use for free
  - Alot of academic papers now publish a R pacakge along with their paper
- Number of R packages on CRAN has recently exceeded 5000


Import Repositories of R packages
========================================================
- The Comprehensive R Archive Network (CRAN)
  - The largest repository; easy to install things
  - cran.rstudio.com
- GitHub
  - Easy installation with the devtools package
  - Increasingly popular
- Bioconductor (bioconductor.org)
  - Bioscience related package
  - High quality packages; more curated
  
Installing packages
========================================================
A Google search will usually tell you the package you need
```{r}
# install a package from CRAN by name
#install.packages("devtools")

# install a package from github
# devtools::install_github("hadley/dplyr")
```

Package Basics
========================================================
- Once a package has been installed you can use the **require** or **library** functions to include them
```{r}
# either of the below is sufficient to include the package in your code
require(dplyr)
library(dplyr)
```

Pakcage Basics
========================================================
You can access a package's functions via ::
```{r}
# you can directly access the functions the package has via ::
# using :: I can run functions and do not need to library or require the pacakge first
# devtools::install_github
```

The plyr & dplyr package
========================================================
- Developed by Hadley Wickam, one of luminaries in the R world
- plyr is one of the most popular R data packages
- dplyr was intended as a much faster replacement of plyr

The plyr & dplyr package (cont)
========================================================
- Both packages employ divide-compute-combine strategies extensively
- Let's study some data manipulation techiqnues with the **iris** data.frame
- **iris** data
  - It's a set of four measurements, namely, Sepal Length & width and petal length & width
  - for 3 species of iris setosa, versicolor, virginica
```{r}
head(iris)
```

The iris data.frame
========================================================
- Explore the iris data
```{r}
nrow(iris)
summary(iris)
```

The iris data.frame
========================================================
- What is the average petal length for each fo the Species
```{r}
require(dplyr)
# create an intermediate "grouped data"
iris.grouped <- group_by(iris,Species)
iris.summ <-summarise(iris.grouped, Avg.Petal.Length = mean(Petal.Length))
iris.summ
```

The "grouped" data
========================================================
```{r}
iris.grouped
```

Summarise 
========================================================
```{r}
iris.summ <- summarize(iris.grouped, Avg.Petal.Length = mean(Petal.Length), Std.Petal.Length = sd(Petal.Length))
# mult
iris.summ
```

dplyr Chaining
========================================================
- Chaining is a powerful dplyr construct
- Easy to follow
```{r}
# the same task but with chaining
# you can chain dplyr operation together with %.%
iris %.% group_by(Species) %.% summarise(Avg.Petal.Length = mean(Petal.Length))
```

Exercises
========================================================
Write a dplyr program that computes the median Sepal.Width for each species

Exercise (Solution)
========================================================
Write a dplyr program that computes the median Sepal.Width for each species
```{r}
iris %.% group_by(Species) %.% summarise(Avg.Sepal.Width = mean(Sepal.Width))
```

The filter() 
========================================================
How to keep only data about the setosa species where the Petal width is > 0.5
```{r}
# basic syntax
iris.filter <- iris[iris$Species == "setosa" & iris$Petal.Width > 0.5,] 
# dplyr syntax
iris.filter <- filter(iris, Species == "setosa", Petal.Width > 0.5)
head(iris.filter)
```

Sorting - dplyr::arange
========================================================
You can sort the data using the arrange function
```{r}
# sort by descending order on Species and ascending order by petal length
iris.sorted <- arrange(iris, desc(Species), Petal.Length)
head(iris.sorted)
```

dplyr::select
========================================================
Allows the user to easily select the columns he wants
```{r}
# show only Petal.Width & Species
head(select(iris, Petal.Width, Species))
```

dplyr::select
========================================================
Allows the user to easily select the columns he wants
```{r}
# Can use a:b to show all columns from a to b
head(select(iris, Petal.Length:Species))
```

dplyr::select
========================================================
Allows the user to easily select the columns he wants
```{r}
# Can use -(a:b) to show all columns but b
head(select(iris, -(Petal.Length:Species)))
```

dplyr::mutate
========================================================
Creating new factors
```{r}
iris.ratio <- iris %.% 
  mutate(Petal.ratio = Petal.Length / Petal.Width) %.% 
  select(Petal.Length:Species, Petal.ratio)
head(iris.ratio)
```

Exercise
========================================================
- Merge the two sets of data together
