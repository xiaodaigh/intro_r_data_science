Lesson 3 - Modern Data manipulation
========================================================
author: Dai ZJ
#width: 1650
#height: 1050
```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
```

Modern data manipulation
========================================================
- R is continually improving 
- R programmers write packages and publish them for other to use for free
  - Alot of academic papers now publish a R pacakge along with their paper
- Number of R packages on CRAN has recently exceeded 5000


Important Repositories of R packages
========================================================
- The Comprehensive R Archive Network (CRAN)
  - The largest repository; easy to install things
  - cran.rstudio.com
- GitHub
  - Easy installation with the devtools package
  - Increasingly popular
- Bioconductor (bioconductor.org)
  - Bioscience related package
  - High quality packages; more curated
  
Installing packages
========================================================
A Google search will usually tell you the package you need
```{r}
# install a package from CRAN by name
#install.packages("devtools")

# install a package from github
# install.packages("dplyr")
```

Package Basics
========================================================
- Once a package has been installed you can use the **require** or **library** functions to include them
```{r}
# either of the below is sufficient to include the package in your code
require(dplyr)
library(dplyr)
```

Pakcage Basics
========================================================
You can access a package's functions via ::
```{r}
# you can directly access the functions the package has via ::
# using :: I can run functions and do not need to library or require the pacakge first
# devtools::install_github
```

The plyr & dplyr package
========================================================
- Developed by Hadley Wickam, one of luminaries in the R world
- plyr is one of the most popular R data packages for data manipulation
- dplyr was intended as a much faster replacement of plyr

The plyr & dplyr package (cont)
========================================================
- Both packages employ divide-compute-combine strategies extensively
- Let's study some data manipulation techiqnues with the **iris** data.frame

The iris data
========================================================
- **iris** data
  - It's a set of four measurements, namely, Sepal Length & width and petal length & width
  - for 3 species of iris setosa, versicolor, virginica
```{r}
head(iris)
```

The iris data.frame
========================================================
- Explore the iris data
```{r}
nrow(iris)
summary(iris)
```

The iris data.frame
========================================================
- What is the average petal length for each fo the Species
```{r}
require(dplyr)
# create an intermediate "grouped data"
iris.grouped <- group_by(iris,Species)
iris.summ <- summarise(iris.grouped, Avg.Petal.Length = mean(Petal.Length),
      cnt = n())
iris.summ
```

The "grouped" data
========================================================
```{r}
iris.grouped
```

Summarise 
========================================================
```{r}
iris.summ <- summarize(iris.grouped, Avg.Petal.Length = mean(Petal.Length), Std.Petal.Length = sd(Petal.Length))
# mult
iris.summ
```

dplyr Chaining
========================================================
- Chaining is a powerful dplyr construct
- Easy to follow
```{r}
# the same task but with chaining
# you can chain dplyr operation together with %.%
iris %.% group_by(Species) %.% summarise(Avg.Petal.Length = mean(Petal.Length))
```

Exercises
========================================================
Write a dplyr program that computes the median Sepal.Width for each species

Exercise (Solution)
========================================================
Write a dplyr program that computes the median Sepal.Width for each species
```{r}
require(dplyr)
iris %.% group_by(Species) %.% summarise(Avg.Sepal.Width = median(Sepal.Width), cnt = n(), d.cnt = n_distinct(Species))
```

The filter() 
========================================================
How to keep only data about the setosa species where the Petal width is > 0.5
```{r}
# basic syntax
iris.filter <- iris[iris$Species == "setosa" & iris$Petal.Width > 0.5,] 
# dplyr syntax
iris.filter <- filter(iris, Species == "setosa", Petal.Width > 0.5)
head(iris.filter)
```

Sorting - dplyr::arrange
========================================================
You can sort the data using the arrange function
```{r}
# sort by descending order on Species and ascending order by petal length
iris.sorted <- arrange(iris, desc(Species), Petal.Length)
head(iris.sorted)
```

dplyr::select
========================================================
Allows the user to easily select the columns he wants
```{r}
# show only Petal.Width & Species
head(select(iris, Petal.Width, Species))
```

dplyr::select
========================================================
Allows the user to easily select the columns he wants
```{r}
# Can use a:b to show all columns from a to b
head(select(iris, Petal.Length:Species))
```

dplyr::select
========================================================
Allows the user to easily select the columns he wants
```{r}
# Can use -(a:b) to show all columns but b
head(select(iris, -(Petal.Length:Species)))
```

dplyr::mutate
========================================================
Creating new factors
```{r}
iris.ratio <- iris %.% 
  mutate(Petal.ratio = Petal.Length / Petal.Width) %.% 
  select(Petal.Length:Species, Petal.ratio)
head(iris.ratio)
```

Exercises
========================================================
- Create a petal.ratio value using mutate where petal.ratio = petal.width/petal.length
- keep only those records that have ratio < 0.3
- compute the mean of the petal.ratio by Specicies of the reduced data
- count the number Species in the reduced data (using n())
- select only the petal width and length, ratio and Species
- Hint: use mutate, filter, group_by and summarise, then select

Exercises (solution)
========================================================
```{r}
# chaining solution
iris %.%  
  mutate(petal.ratio = Petal.Width / Petal.Length) %.% #creating a new var 
  filter(petal.ratio < 0.3) %.% # filtering.
  group_by(Species) %.%
  summarise(mean.ratio = mean(petal.ratio), cnt = n()) 
```

Inner joins
========================================================
```{r}
require(dplyr)
a <- data.frame(id = 1:3, val.a = 4:6)
b <- data.frame(id = 2:5, val.b = 4:7)
ab.inner <- inner_join(a,b) # joins a and b using the common columns returning all rows from a where there are matching values in b
ab.inner
```

Left joins
========================================================
Left join
```{r}
require(dplyr)
ab.left <- left_join(a,b) # joins a and b using the common columns returning all rows from a 
ab.left
```

Anti joins
========================================================
```{r}
require(dplyr)
ab.anti <- anti_join(a,b) # joins a and b using the common columns returning all rows from a 
ab.anti
```

If you know SQL
========================================================
- You can manipulate data.frames using SQL (SQLite flavour)
- requires the sqldf package
```{r}
# install.packages("sqldf")
require(sqldf)
a <- data.frame(id = 1:3, val.a = 4:6)
b <- data.frame(id = 2:5, val.b = 4:7)
ab <- sqldf("select a.*, b.* from a, b where a.id = b.id")
```